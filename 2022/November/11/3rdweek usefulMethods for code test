
배열함수
shift() - 배열을 왼쪽으로 이동 / 첫번째 삭제
unshift() - 배열을 오른쪽으로 이동 / 첫번째에 추가
pop() - 마지막 요소를 삭제하고 그 값을 반환함.

splice(x,y,z) - x 조작을 시작할 인덱스 번호
                  - y 삭제할 요소 갯수
                  - z 삽입 또는 대체할 객체 / 생략가능

slice(x, y) - x 시작 인덱스 위치
               - y 마지막 다음 인덱스 위치
               - 둘다 생략되면 전체를 잘라오고
                  y가 생략되면 x부터 끝까지 잘라옴.

indexOf(찾으려는 조건) : 조건에 맞는 객체의 인덱스 값을 반환함. 찾지 못하면 -1을 반환함.

Join(): 배열 내 각 요소를 문자열로 이어 붙일때

Math.Sqrt() 재곱근 구하는 공식 
Math.pow() 거듭제곱근 구하는 공식: 여기서 만약 math.pow(2, 3) 이러면, 2의 3승이라는 뜻이다. 

find((x, y, z) => { })
   x 배열 내단일 객체
   y 인덱스
   z 전체 배열
=> 해당 값을 찾아내면 원본 자체를 조작함.

findIndex((x, y, z) => { })
find와 동일하게 작동함. 반환값이 인덱스 값일 뿐.

includes(x) : x가 배열에 포함되어있는지 true 또는 false로 반환함.

forEach((x,y,z)=>{}) 배열의 모든 객체에 함수를 적용함.(for of 문과 동일)
유용한 점은 인덱스 값을 별도 변수로 사용할 일 없이 블록 스코프 내에서 사용 가능하다는 점.
   x 배열 내단일 객체
   y 인덱스
   z 전체 배열

filter() 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환합니다.
filter((x,y,z)=>{return 조건}) 
words.filter(word => word.length > 6);

map((x,y,z)=>{return}) 배열의 모든 객체에 함수를 적용하여 새로운 배열로 반환시킴.(forEach와 차이점)
참조된 객체와는 별도의 함수를 통과한 새로운 배열이 생성됨.
   x 배열 내단일 객체
   y 인덱스
   z 전체 배열

sort((a,b) => {정렬 조건}) : 정렬하게 됨. 파라미터 없이 사용했을 때에는 첫값을 기준으로 순서대로 정렬시킴.
   > 10이 3보다 앞에오는 불상사가 생김. 1과 3을 비교하기 때문에. 그래서 정렬조건을 익명함수로 넣어줌.
기본적으로 순서대로 정렬하는 것(숫자)
 if(a>b) {
   return 1;
}else if ( a===b) {
   return 0;
}else {
   return -1;
}

reduce((x,y)b)
 배열의 값을 점진적으로 줄이면서 계산하는 함수
   x 초기값 변수 
   y 진행하려는 객체의 값
   b 초기 계산 결과 값

reverse() : 인덱스를 뒤집어서 정렬 

★ 배열에 있는 값들을 각각 다른 변수에 저장하기
const array = a, b
const [c, d] = array
//결과값 : c = a, d = b

Maps 함수

get(키) : 키에 대한 값을 반환함.
set(키,값) : 키-값 추가 
entries() : 키-값을 각각 반환함.
keys() : 키값만을 반환함.
values() : 밸류값만 반환함.
size : 몇개의 키-값 쌍이 들어있는지 반환함.


Math.min() 함수는 주어진 숫자들 중 가장 작은 값을 반환합니다.
 const min = Math.min(...arr)
Math.max()
https://codechacha.com/ko/javascript-get-min-max-in-array/



Spread Operator(전개 연산자)는 ES6 문법으로
'...' 이렇게 점 3개로 표현하고,
객체나 배열의 원소들을 하나씩 꺼내어서 펼쳐서 리턴합니다.
즉, Math.max(...arr)와 같이 작성해주면 실제로는
Math.max(1, 2, 3, 4, 5)와 같이 실행되게 됩니다.
개인적으로는 가독성이 좋기 때문에, 이 방법을 사용하는 것을 선호합니다.



JWT 와 API

기본적인 로그인 method 를 설명하면서 JWT 를 설명하면 좋을 것 같다.
1. 우선 register는 기본적인 template 을 이용해서 작성하면 되고, 중요한 사실은 hash함수를 이용함으로써, 암호를 encoding 하는 기능이 중요하다. 
2. 모든 정보가 db에 쌓이게 되면서 내 cookie에는 encoding file 이 쌓이게 되고, 그때 받는게 JWT 토큰이고, 증서 처럼 사용이된다. 
3. 이것을 사용함으로 써, 로그인할때, 내가 이 토큰이 있는지를 확인함으로써, 나를 로그인 시켜주는 것 이다. 

API 
application programming interface
내가 이해한 바로는, 컴퓨터와 나 나 와 컴퓨터, 혹은 컴퓨터와 컴퓨터가 서로 다른 언어를 사용하기 때문에, middle ground를 설정해
그 언어를 주고받음으로써, 서로간의 대화가 이뤄진다고 배웠다.